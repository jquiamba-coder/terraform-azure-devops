trigger:
  - main  # Run the pipeline when changes are pushed to the main branch

pool:
  vmImage: 'ubuntu-latest'

variables:
  TF_VERSION: '1.6.0'
  AZURE_SUBSCRIPTION: 'terraform-pipeline'  # Use service connection name, not subscription ID

stages:
  - stage: Terraform_Deploy
    displayName: "Terraform Deployment"
    jobs:
      - job: Terraform
        displayName: "Run Terraform"
        pool:
          vmImage: 'ubuntu-latest'
        steps:

          # Step 1: Install Terraform
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: $(TF_VERSION)

          # Step 2: Authenticate with Azure
          - task: AzureCLI@2
            displayName: "Login to Azure using Federated Credentials"
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -x
                echo "Confirming Azure authentication..."
                az account show --output json || (echo "Azure authentication failed." && exit 1)
                echo "Azure authentication successful."

          # Step 3: Set Environment Variables for Terraform Authentication
          - task: AzureCLI@2
            displayName: "Set Azure Authentication for Terraform"
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -x
                echo "Setting up Terraform authentication..."

                export ARM_USE_OIDC=true
                export ARM_CLIENT_ID=$(az ad sp show --id $(AZURE_CLIENT_ID) --query appId -o tsv)
                export ARM_TENANT_ID=$(az account show --query tenantId -o tsv)
                export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)

                echo "##vso[task.setvariable variable=ARM_USE_OIDC;]true"
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID;]$ARM_CLIENT_ID"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;]$ARM_TENANT_ID"
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;]$ARM_SUBSCRIPTION_ID"

                echo "Terraform authentication environment is set."

          - task: AzureCLI@2
            displayName: "Azure Login"
            inputs:
              azureSubscription: "<Your-Service-Connection-Name>"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                az account set --subscription $AZURE_SUBSCRIPTION_ID
                az account show


          # Debug Step: Verify Terraform Authentication Variables
          - script: |
              echo "Checking if ARM environment variables are set..."
              env | grep ARM_ || echo "No ARM environment variables found."
            displayName: "Debug Terraform Authentication Variables"

          # Step 4: Initialize Terraform
          - script: |
              terraform init -upgrade \
                -backend-config="resource_group_name=<RESOURCE_GROUP_NAME>" \
                -backend-config="storage_account_name=<STORAGE_ACCOUNT_NAME>" \
                -backend-config="container_name=<CONTAINER_NAME>" \
                -backend-config="key=terraform.tfstate"
            displayName: "Terraform Init"
            workingDirectory: 'infra/terraform'

          # Step 5: Generate Terraform Plan
          - script: |
              terraform plan -out=tfplan
            displayName: "Terraform Plan"
            workingDirectory: 'infra/terraform'

          # Step 6: Upload Terraform Lock File and Plan
          - task: PublishPipelineArtifact@1
            displayName: "Upload Terraform Lock File"
            inputs:
              targetPath: 'infra/terraform/.terraform.lock.hcl'
              artifact: 'terraform-lockfile'

          - task: PublishPipelineArtifact@1
            displayName: "Upload tfplan"
            inputs:
              targetPath: 'infra/terraform/tfplan'
              artifact: 'tfplan'

      - job: Manual_Approval
        displayName: "Approve Terraform Apply"
        dependsOn: Terraform
        pool: server
        steps:
          - task: ManualValidation@1
            displayName: "Approve Terraform Apply"
            inputs:
              notifyUsers: "jlsryn.quiambao@gmail.com"
              instructions: "Review Terraform plan before applying."

      - job: Terraform_Apply
        displayName: "Terraform Apply"
        dependsOn: Manual_Approval
        pool:
          vmImage: 'ubuntu-latest'
        steps:

          # Step 7: Install Terraform
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: $(TF_VERSION)

          # Step 8: Download Terraform Lock File and Plan
          - task: DownloadPipelineArtifact@2
            displayName: "Download Terraform Lock File"
            inputs:
              artifact: 'terraform-lockfile'
              path: 'infra/terraform'

          - task: DownloadPipelineArtifact@2
            displayName: "Download tfplan"
            inputs:
              artifact: 'tfplan'
              path: 'infra/terraform'

          # Step 9: Reinitialize Terraform
          - script: |
              terraform init -upgrade
            displayName: "Reinitialize Terraform"
            workingDirectory: 'infra/terraform'

          # Step 10: Apply Terraform Plan
          - script: |
              terraform apply -auto-approve tfplan
            displayName: "Terraform Apply"
            workingDirectory: 'infra/terraform'
