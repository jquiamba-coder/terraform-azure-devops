trigger:
  - main

stages:
  - stage: Terraform_Dev
    displayName: "Terraform Plan for Dev"
    jobs:
      - job: Plan_Dev
        displayName: "Terraform Init & Plan"
        pool:
          vmImage: "ubuntu-22.04"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "latest"

          - task: AzureCLI@2
            displayName: "Azure CLI Login (Service Connection)"
            inputs:
              azureSubscription: "azure-terraform-connection"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "‚úÖ Azure login successful"
                az account set --subscription "$ARM_SUBSCRIPTION_ID"
                az account show

          - script: |
              echo "üîπ Creating Resource Group and Storage Account if not exist..."

              RG_NAME="terraform-state-rg"
              STORAGE_ACCOUNT_NAME="jqterraformstate1"
              CONTAINER_NAME="tfstate"
              LOCATION="eastus"

              # Ensure login is successful
              az account show || { echo "‚ùå Not logged into Azure!"; exit 1; }

              # Create Resource Group if not exists
              if ! az group show --name "$RG_NAME" &>/dev/null; then
                echo "Creating Resource Group: $RG_NAME"
                az group create --name "$RG_NAME" --location "$LOCATION" || { echo "‚ùå Failed to create Resource Group"; exit 1; }
              else
                echo "‚úÖ Resource Group $RG_NAME already exists."
              fi

              # Create Storage Account if not exists
              if ! az storage account show --name "$STORAGE_ACCOUNT_NAME" --resource-group "$RG_NAME" &>/dev/null; then
                echo "Creating Storage Account: $STORAGE_ACCOUNT_NAME"
                az storage account create \
                  --name "$STORAGE_ACCOUNT_NAME" \
                  --resource-group "$RG_NAME" \
                  --sku Standard_LRS \
                  --kind StorageV2 \
                  --location "$LOCATION" \
                  --allow-blob-public-access false || { echo "‚ùå Failed to create Storage Account"; exit 1; }
              else
                echo "‚úÖ Storage Account $STORAGE_ACCOUNT_NAME already exists."
              fi

              # Get Storage Account Key (Required for Container Creation)
              STORAGE_KEY=$(az storage account keys list --account-name "$STORAGE_ACCOUNT_NAME" --resource-group "$RG_NAME" --query '[0].value' -o tsv)

              # Create Storage Container if not exists
              if ! az storage container show --name "$CONTAINER_NAME" --account-name "$STORAGE_ACCOUNT_NAME" --account-key "$STORAGE_KEY" &>/dev/null; then
                echo "Creating Storage Container: $CONTAINER_NAME"
                az storage container create --name "$CONTAINER_NAME" --account-name "$STORAGE_ACCOUNT_NAME" --account-key "$STORAGE_KEY" || { echo "‚ùå Failed to create Storage Container"; exit 1; }
              else
                echo "‚úÖ Storage Container $CONTAINER_NAME already exists."
              fi
            displayName: "Create Resource Group, Storage Account, and Container"

          - script: |
              echo "üîπ Initializing Terraform Backend..."
              terraform init -reconfigure
              terraform workspace select dev || terraform workspace new dev
              terraform plan -var="resource_group_name=dev-rg"
            displayName: "Terraform Init & Plan (Dev)"
            env:
              ARM_CLIENT_ID: "$(ARM_CLIENT_ID)"
              ARM_CLIENT_SECRET: "$(ARM_CLIENT_SECRET)"
              ARM_TENANT_ID: "$(ARM_TENANT_ID)"
              ARM_SUBSCRIPTION_ID: "$(ARM_SUBSCRIPTION_ID)"
              ARM_USE_OIDC: "true"
